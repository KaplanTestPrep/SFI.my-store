[13-01-17 13:25:05,311] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,312] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,312] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:25:05,312] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [PESSIMISTIC_FORCE_INCREMENT]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=? for update nowait
[13-01-17 13:25:05,312] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@62cf6a84]
[13-01-17 13:25:05,313] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:25:05,313] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:25:05,313] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,313] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,313] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,314] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,314] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:25:05,314] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [OPTIMISTIC]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:25:05,314] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6b2aafbc]
[13-01-17 13:25:05,315] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:25:05,315] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:25:05,315] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,315] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,316] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,316] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,316] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:25:05,317] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [OPTIMISTIC_FORCE_INCREMENT]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:25:05,328] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_MERGE on entity com.kaplan.coding.mystore.persistence.domain.OrderItem: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:25:05,329] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_REFRESH on entity com.kaplan.coding.mystore.persistence.domain.OrderItem: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:25:05,329] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3544) -> Static SQL for entity: com.kaplan.coding.mystore.persistence.domain.Product
[13-01-17 13:25:05,329] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3549) ->  Version select: select SKU from PRODUCT where SKU =?
[13-01-17 13:25:05,329] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3552) ->  Snapshot select: select product_.SKU, product_.NAME as NAME2_2_, product_.QUANTITY as QUANTITY3_2_, product_.UNIT_PRICE as UNIT_PRI4_2_ from PRODUCT product_ where product_.SKU=?
[13-01-17 13:25:05,329] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Insert 0: insert into PRODUCT (NAME, QUANTITY, UNIT_PRICE, SKU) values (?, ?, ?, ?)
[13-01-17 13:25:05,329] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Update 0: update PRODUCT set NAME=?, QUANTITY=?, UNIT_PRICE=? where SKU=?
[13-01-17 13:25:05,330] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Delete 0: delete from PRODUCT where SKU=?
[13-01-17 13:25:05,330] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@787178b1]
[13-01-17 13:25:05,330] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,330] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,330] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,331] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,331] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,331] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,331] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [NONE]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:25:05,332] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@27da994b]
[13-01-17 13:25:05,332] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,332] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,332] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,333] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,333] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,333] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,334] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [READ]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:25:05,334] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3360283]
[13-01-17 13:25:05,334] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,334] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,335] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,335] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,335] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,336] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,336] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [UPGRADE]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update
[13-01-17 13:25:05,336] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73e4bb60]
[13-01-17 13:25:05,336] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,337] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,337] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,337] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,337] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,338] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,338] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [UPGRADE_NOWAIT]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update nowait
[13-01-17 13:25:05,338] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a3883c4]
[13-01-17 13:25:05,338] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,339] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,339] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,339] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,340] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,340] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,340] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [UPGRADE_SKIPLOCKED]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update
[13-01-17 13:25:05,340] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1304e0d7]
[13-01-17 13:25:05,340] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,341] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,341] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,341] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,341] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,342] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,342] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [FORCE]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update nowait
[13-01-17 13:25:05,342] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7767bd4e]
[13-01-17 13:25:05,342] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,342] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,342] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,343] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,343] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,343] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,343] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [PESSIMISTIC_READ]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update
[13-01-17 13:25:05,344] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@433ef204]
[13-01-17 13:25:05,344] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,344] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,344] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,344] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,345] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,345] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,345] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [PESSIMISTIC_WRITE]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update
[13-01-17 13:25:05,345] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@795b66d]
[13-01-17 13:25:05,346] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,346] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,346] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,346] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,346] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,347] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,347] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [PESSIMISTIC_FORCE_INCREMENT]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update nowait
[13-01-17 13:25:05,347] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1068176]
[13-01-17 13:25:05,347] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,348] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,348] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,348] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,348] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,348] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,349] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [OPTIMISTIC]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:25:05,349] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71789580]
[13-01-17 13:25:05,349] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:25:05,349] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:25:05,349] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:25:05,350] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,350] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,350] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:25:05,350] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [OPTIMISTIC_FORCE_INCREMENT]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:25:05,351] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_MERGE on entity com.kaplan.coding.mystore.persistence.domain.Product: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:25:05,351] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_REFRESH on entity com.kaplan.coding.mystore.persistence.domain.Product: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:25:05,351] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3544) -> Static SQL for entity: com.kaplan.coding.mystore.persistence.domain.Orders
[13-01-17 13:25:05,352] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3549) ->  Version select: select ID from ORDERS where ID =?
[13-01-17 13:25:05,352] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3552) ->  Snapshot select: select orders_.ID, orders_.AMOUNT as AMOUNT2_1_, orders_.CREATED_DATE as CREATED_3_1_ from ORDERS orders_ where orders_.ID=?
[13-01-17 13:25:05,352] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Insert 0: insert into ORDERS (AMOUNT, CREATED_DATE, ID) values (?, ?, ?)
[13-01-17 13:25:05,352] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Update 0: update ORDERS set AMOUNT=?, CREATED_DATE=? where ID=?
[13-01-17 13:25:05,352] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Delete 0: delete from ORDERS where ID=?
[13-01-17 13:25:05,353] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@165614f5]
[13-01-17 13:25:05,353] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,353] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,353] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,354] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,354] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,354] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [NONE]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:25:05,354] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b0902b4]
[13-01-17 13:25:05,355] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,355] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,355] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,355] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,356] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,356] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [READ]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:25:05,356] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f04993d]
[13-01-17 13:25:05,356] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,357] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,357] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,357] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,358] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,358] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [UPGRADE]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update
[13-01-17 13:25:05,358] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@103c97ff]
[13-01-17 13:25:05,358] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,358] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,359] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,359] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,359] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,359] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [UPGRADE_NOWAIT]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update nowait
[13-01-17 13:25:05,360] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c14e5a5]
[13-01-17 13:25:05,360] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,360] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,360] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,360] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,361] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,361] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [UPGRADE_SKIPLOCKED]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update
[13-01-17 13:25:05,361] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6206b4a7]
[13-01-17 13:25:05,361] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,361] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,361] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,362] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,362] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,362] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [FORCE]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update nowait
[13-01-17 13:25:05,362] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5c1b89ac]
[13-01-17 13:25:05,363] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,363] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,363] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,363] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,364] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,364] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [PESSIMISTIC_READ]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update
[13-01-17 13:25:05,364] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@175581eb]
[13-01-17 13:25:05,364] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,364] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,365] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,365] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,365] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,365] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [PESSIMISTIC_WRITE]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update
[13-01-17 13:25:05,366] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2baf72d5]
[13-01-17 13:25:05,366] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,366] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,366] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,366] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,367] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,367] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [PESSIMISTIC_FORCE_INCREMENT]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update nowait
[13-01-17 13:25:05,367] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5d14e99e]
[13-01-17 13:25:05,367] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,368] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,368] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,368] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,369] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,369] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [OPTIMISTIC]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:25:05,369] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@682618e5]
[13-01-17 13:25:05,369] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:25:05,369] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:25:05,370] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:25:05,370] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:25:05,370] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:25:05,370] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [OPTIMISTIC_FORCE_INCREMENT]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:25:05,371] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_MERGE on entity com.kaplan.coding.mystore.persistence.domain.Orders: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:25:05,371] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_REFRESH on entity com.kaplan.coding.mystore.persistence.domain.Orders: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:25:05,489] DEBUG (tool.schema.spi.SchemaManagementToolCoordinator-                       process:  56) -> No actions specified; doing nothing
[13-01-17 13:25:05,490] DEBUG (   jta.platform.internal.JtaPlatformInitiator-               initiateService:  42) -> No JtaPlatform was specified, checking resolver
[13-01-17 13:25:05,491] DEBUG (jta.platform.internal.JtaPlatformResolverInitiator-               initiateService:  33) -> No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
[13-01-17 13:25:05,494] DEBUG (jta.platform.internal.StandardJtaPlatformResolver-            resolveJtaPlatform: 102) -> Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
[13-01-17 13:25:05,495] DEBUG (     hibernate.query.spi.NamedQueryRepository-             checkNamedQueries: 151) -> Checking 0 named HQL queries
[13-01-17 13:25:05,495] DEBUG (     hibernate.query.spi.NamedQueryRepository-             checkNamedQueries: 167) -> Checking 0 named SQL queries
[13-01-17 13:25:05,496] DEBUG (org.hibernate.internal.SessionFactoryRegistry-                        <init>:  52) -> Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@716f94c1
[13-01-17 13:25:05,496] DEBUG (org.hibernate.internal.SessionFactoryRegistry-             addSessionFactory:  74) -> Registering SessionFactory: aed1a76e-20d6-420b-a345-a85a8112e7af (<unnamed>)
[13-01-17 13:25:05,497] DEBUG (org.hibernate.internal.SessionFactoryRegistry-             addSessionFactory:  81) -> Not binding SessionFactory to JNDI, no JNDI name configured
[13-01-17 13:25:08,635] DEBUG (  hibernate.stat.internal.StatisticsInitiator-       initiateServiceInternal:  82) -> Statistics initialized [enabled=true]
[13-01-17 13:25:08,640] DEBUG (  engine.transaction.internal.TransactionImpl-                         begin:  55) -> begin
[13-01-17 13:25:08,642]  WARN (           org.hibernate.internal.SessionImpl-                createCriteria:1796) -> HHH90000022: Hibernate's legacy org.hibernate.Criteria API is deprecated; use the JPA javax.persistence.criteria.CriteriaQuery instead
[13-01-17 13:25:08,782] DEBUG (hibernate.stat.internal.ConcurrentStatisticsImpl-                 queryExecuted: 387) -> HHH000117: HQL: [CRITERIA] select this_.SKU as SKU1_2_0_, this_.NAME as NAME2_2_0_, this_.QUANTITY as QUANTITY3_2_0_, this_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT this_, time: 132ms, rows: 0
[13-01-17 13:25:08,783] DEBUG (  engine.transaction.internal.TransactionImpl-                        commit:  66) -> committing
[13-01-17 13:25:08,882] DEBUG (resource.jdbc.internal.LogicalConnectionManagedImpl-              afterTransaction: 154) -> Initiating JDBC connection release from afterTransaction
[13-01-17 13:25:08,979] DEBUG (resource.jdbc.internal.LogicalConnectionManagedImpl-              afterTransaction: 154) -> Initiating JDBC connection release from afterTransaction
[13-01-17 13:25:08,979]  INFO (hibernate.engine.internal.StatisticalLoggingSessionEventListener-                           end: 258) -> Session Metrics {
    47955 nanoseconds spent acquiring 1 JDBC connections;
    96870426 nanoseconds spent releasing 1 JDBC connections;
    28215285 nanoseconds spent preparing 1 JDBC statements;
    97062450 nanoseconds spent executing 1 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    19929 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)
}
[13-01-17 13:26:03,196] DEBUG (    org.hibernate.internal.SessionFactoryImpl-                         close: 733) -> HHH000031: Closing
[13-01-17 13:26:03,196] DEBUG (hibernate.service.internal.AbstractServiceRegistryImpl-               deRegisterChild: 410) -> Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
[13-01-17 13:26:03,196] DEBUG (boot.registry.internal.BootstrapServiceRegistryImpl-               deRegisterChild: 295) -> Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
[13-01-17 13:26:07,634] DEBUG (hibernate.integrator.internal.IntegratorServiceImpl-                 addIntegrator:  46) -> Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[13-01-17 13:26:07,636] DEBUG (hibernate.integrator.internal.IntegratorServiceImpl-                 addIntegrator:  46) -> Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[13-01-17 13:26:07,639] DEBUG (hibernate.integrator.internal.IntegratorServiceImpl-                 addIntegrator:  46) -> Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[13-01-17 13:26:07,712]  INFO (                        org.hibernate.Version-                    logVersion:  45) -> HHH000412: Hibernate Core {5.2.5.Final}
[13-01-17 13:26:07,713]  INFO (                org.hibernate.cfg.Environment-                      <clinit>: 213) -> HHH000206: hibernate.properties not found
[13-01-17 13:26:07,726] DEBUG (  jaxb.internal.stax.LocalXmlResourceResolver-                 resolveEntity:  57) -> Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD 3.0//EN] - [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]
[13-01-17 13:26:07,728]  WARN (  jaxb.internal.stax.LocalXmlResourceResolver-                 resolveEntity:  91) -> HHH90000012: Recognized obsolete hibernate namespace http://hibernate.sourceforge.net/hibernate-configuration. Use namespace http://www.hibernate.org/dtd/hibernate-configuration instead.  Support for obsolete DTD/XSD namespaces may be removed at any time.
[13-01-17 13:26:07,728] DEBUG (  jaxb.internal.stax.LocalXmlResourceResolver-                 resolveEntity:  95) -> Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
[13-01-17 13:26:07,730] DEBUG (        boot.cfgxml.internal.JaxbCfgProcessor-                     unmarshal: 116) -> cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
[13-01-17 13:26:07,802] DEBUG (              org.hibernate.cfg.Configuration-           buildSessionFactory: 724) -> Building session factory using internal StandardServiceRegistryBuilder
[13-01-17 13:26:07,807] DEBUG (         hibernate.service.spi.ServiceBinding-                    setService:  68) -> Overriding existing service binding [org.hibernate.secure.spi.JaccService]
[13-01-17 13:26:07,807] DEBUG (              org.hibernate.cfg.Configuration-           buildSessionFactory: 652) -> Building session factory using provided StandardServiceRegistry
[13-01-17 13:26:07,817] DEBUG (hibernate.cache.internal.RegionFactoryInitiator-               initiateService:  75) -> Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
[13-01-17 13:26:07,822]  INFO ( common.reflection.java.JavaReflectionManager-                      <clinit>:  66) -> HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
[13-01-17 13:26:10,760] DEBUG (   jdbc.env.internal.JdbcEnvironmentInitiator-               initiateService:  72) -> Database ->
       name : Oracle
    version : Oracle Database 11g Release 11.2.0.4.0 - 64bit Production
      major : 11
      minor : 2
[13-01-17 13:26:10,761] DEBUG (   jdbc.env.internal.JdbcEnvironmentInitiator-               initiateService:  83) -> Driver ->
       name : Oracle JDBC driver
    version : 12.1.0.2.0
      major : 12
      minor : 1
[13-01-17 13:26:10,762] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 389) -> JDBC version : 4.1
[13-01-17 13:26:10,772]  INFO (                org.hibernate.dialect.Dialect-                        <init>: 157) -> HHH000400: Using dialect: org.hibernate.dialect.OracleDialect
[13-01-17 13:26:10,776]  WARN (         org.hibernate.dialect.Oracle9Dialect-                        <init>:  56) -> HHH000063: The Oracle9Dialect dialect has been deprecated; use either Oracle9iDialect or Oracle10gDialect instead
[13-01-17 13:26:10,777]  WARN (          org.hibernate.dialect.OracleDialect-                        <init>:  39) -> HHH000064: The OracleDialect dialect has been deprecated; use Oracle8iDialect instead
[13-01-17 13:26:11,923] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
[13-01-17 13:26:11,923] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
[13-01-17 13:26:11,924] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
[13-01-17 13:26:11,924] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
[13-01-17 13:26:11,925] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
[13-01-17 13:26:11,925] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
[13-01-17 13:26:11,926] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
[13-01-17 13:26:11,927] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[13-01-17 13:26:11,927] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
[13-01-17 13:26:11,928] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
[13-01-17 13:26:11,929] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
[13-01-17 13:26:11,929] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
[13-01-17 13:26:11,929] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[13-01-17 13:26:11,931] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
[13-01-17 13:26:11,948] DEBUG (              boot.model.relational.Namespace-                        <init>:  47) -> Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
[13-01-17 13:26:11,965] DEBUG (           org.hibernate.cfg.AnnotationBinder-                     bindClass: 511) -> Binding entity from annotated class: com.kaplan.coding.mystore.persistence.domain.Product
[13-01-17 13:26:11,982] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[13-01-17 13:26:11,986] DEBUG (       hibernate.cfg.annotations.EntityBinder-                    bindEntity: 414) -> Import with entity name Product
[13-01-17 13:26:11,987] DEBUG (       hibernate.cfg.annotations.EntityBinder-                     bindTable: 690) -> Bind entity com.kaplan.coding.mystore.persistence.domain.Product on table PRODUCT
[13-01-17 13:26:12,003] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PRODUCT), mappingColumn=SKU, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,005] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property sku with lazy=false
[13-01-17 13:26:12,007] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Product:sku]
[13-01-17 13:26:12,008] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for sku
[13-01-17 13:26:12,009] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property sku
[13-01-17 13:26:12,011] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PRODUCT), mappingColumn=NAME, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,011] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property name with lazy=false
[13-01-17 13:26:12,011] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Product:name]
[13-01-17 13:26:12,012] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for name
[13-01-17 13:26:12,012] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property name
[13-01-17 13:26:12,012] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PRODUCT), mappingColumn=QUANTITY, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,012] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property quantity with lazy=false
[13-01-17 13:26:12,013] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Product:quantity]
[13-01-17 13:26:12,013] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for quantity
[13-01-17 13:26:12,013] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property quantity
[13-01-17 13:26:12,014] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PRODUCT), mappingColumn=UNIT_PRICE, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,014] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property unitPrice with lazy=false
[13-01-17 13:26:12,014] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Product:unitPrice]
[13-01-17 13:26:12,015] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for unitPrice
[13-01-17 13:26:12,015] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property unitPrice
[13-01-17 13:26:12,016] DEBUG (           org.hibernate.cfg.AnnotationBinder-                     bindClass: 511) -> Binding entity from annotated class: com.kaplan.coding.mystore.persistence.domain.Orders
[13-01-17 13:26:12,016] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[13-01-17 13:26:12,016] DEBUG (       hibernate.cfg.annotations.EntityBinder-                    bindEntity: 414) -> Import with entity name Orders
[13-01-17 13:26:12,017] DEBUG (       hibernate.cfg.annotations.EntityBinder-                     bindTable: 690) -> Bind entity com.kaplan.coding.mystore.persistence.domain.Orders on table ORDERS
[13-01-17 13:26:12,018] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDERS), mappingColumn=ID, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,018] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property orderId with lazy=false
[13-01-17 13:26:12,019] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Orders:orderId]
[13-01-17 13:26:12,019] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for orderId
[13-01-17 13:26:12,019] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property orderId
[13-01-17 13:26:12,020] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDERS), mappingColumn=AMOUNT, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,020] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property amount with lazy=false
[13-01-17 13:26:12,020] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Orders:amount]
[13-01-17 13:26:12,020] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for amount
[13-01-17 13:26:12,021] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property amount
[13-01-17 13:26:12,021] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDERS), mappingColumn=CREATED_DATE, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,021] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property createdDate with lazy=false
[13-01-17 13:26:12,022] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Orders:createdDate]
[13-01-17 13:26:12,022] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for createdDate
[13-01-17 13:26:12,022] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property createdDate
[13-01-17 13:26:12,023] DEBUG (           org.hibernate.cfg.AnnotationBinder-                     bindClass: 511) -> Binding entity from annotated class: com.kaplan.coding.mystore.persistence.domain.OrderItem
[13-01-17 13:26:12,023] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[13-01-17 13:26:12,023] DEBUG (       hibernate.cfg.annotations.EntityBinder-                    bindEntity: 414) -> Import with entity name OrderItem
[13-01-17 13:26:12,024] DEBUG (       hibernate.cfg.annotations.EntityBinder-                     bindTable: 690) -> Bind entity com.kaplan.coding.mystore.persistence.domain.OrderItem on table ORDER_ITEM
[13-01-17 13:26:12,028] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=ORDER_ITEM_ID, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,028] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property orderItemId with lazy=false
[13-01-17 13:26:12,028] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:orderItemId]
[13-01-17 13:26:12,029] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for orderItemId
[13-01-17 13:26:12,029] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property orderItemId
[13-01-17 13:26:12,030] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=orders, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,031] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property orders with lazy=false
[13-01-17 13:26:12,031] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:orders]
[13-01-17 13:26:12,031] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for orders
[13-01-17 13:26:12,031] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property orders
[13-01-17 13:26:12,032] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=product, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,032] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property product with lazy=false
[13-01-17 13:26:12,032] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:product]
[13-01-17 13:26:12,032] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for product
[13-01-17 13:26:12,032] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property product
[13-01-17 13:26:12,033] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=SOLD_QUANTITY, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,033] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property quantity with lazy=false
[13-01-17 13:26:12,033] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:quantity]
[13-01-17 13:26:12,033] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for quantity
[13-01-17 13:26:12,033] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property quantity
[13-01-17 13:26:12,034] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=UNIT_PRICE, insertable=true, updatable=true, unique=false}
[13-01-17 13:26:12,034] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property unitPrice with lazy=false
[13-01-17 13:26:12,034] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:unitPrice]
[13-01-17 13:26:12,034] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for unitPrice
[13-01-17 13:26:12,035] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property unitPrice
[13-01-17 13:26:12,035] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for sku
[13-01-17 13:26:12,036] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for name
[13-01-17 13:26:12,036] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for quantity
[13-01-17 13:26:12,036] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for unitPrice
[13-01-17 13:26:12,036] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for orderId
[13-01-17 13:26:12,037] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for amount
[13-01-17 13:26:12,037] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for createdDate
[13-01-17 13:26:12,037] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for orderItemId
[13-01-17 13:26:12,037] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for orders
[13-01-17 13:26:12,038] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.Orders] is safe
[13-01-17 13:26:12,038] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.Orders
[13-01-17 13:26:12,038] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for product
[13-01-17 13:26:12,038] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.Product] is safe
[13-01-17 13:26:12,038] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.Product
[13-01-17 13:26:12,039] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for quantity
[13-01-17 13:26:12,039] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for unitPrice
[13-01-17 13:26:12,040] DEBUG (             org.hibernate.mapping.PrimaryKey-                     addColumn:  35) -> Forcing column [sku] to be non-null as it is part of the primary key for table [product]
[13-01-17 13:26:12,040] DEBUG (             org.hibernate.mapping.PrimaryKey-                     addColumn:  35) -> Forcing column [id] to be non-null as it is part of the primary key for table [orders]
[13-01-17 13:26:12,040] DEBUG (             org.hibernate.mapping.PrimaryKey-                     addColumn:  35) -> Forcing column [order_item_id] to be non-null as it is part of the primary key for table [order_item]
[13-01-17 13:26:12,063] DEBUG (    org.hibernate.internal.SessionFactoryImpl-                        <init>: 199) -> Building session factory
[13-01-17 13:26:12,064] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  69) -> SessionFactory name : null
[13-01-17 13:26:12,064] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  70) -> Automatic flush during beforeCompletion(): enabled
[13-01-17 13:26:12,064] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  71) -> Automatic session close at end of transaction: disabled
[13-01-17 13:26:12,064] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  73) -> Statistics: enabled
[13-01-17 13:26:12,064] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  75) -> Deleted entity synthetic identifier rollback: disabled
[13-01-17 13:26:12,065] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  76) -> Default entity-mode: pojo
[13-01-17 13:26:12,065] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  77) -> Check Nullability in Core (should be disabled when Bean Validation is on): enabled
[13-01-17 13:26:12,065] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  78) -> Allow initialization of lazy state outside session : disabled
[13-01-17 13:26:12,065] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  80) -> Using BatchFetchStyle : LEGACY
[13-01-17 13:26:12,065] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  81) -> Default batch fetch size: -1
[13-01-17 13:26:12,066] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  82) -> Maximum outer join fetch depth: null
[13-01-17 13:26:12,066] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  83) -> Default null ordering: NONE
[13-01-17 13:26:12,066] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  84) -> Order SQL updates by primary key: enabled
[13-01-17 13:26:12,066] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  85) -> Order SQL inserts for batching: disabled
[13-01-17 13:26:12,066] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  87) -> multi-tenancy strategy : NONE
[13-01-17 13:26:12,066] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  89) -> JTA Track by Thread: enabled
[13-01-17 13:26:12,067] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  91) -> Query language substitutions: {}
[13-01-17 13:26:12,067] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  92) -> JPA query language strict compliance: disabled
[13-01-17 13:26:12,067] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  93) -> Named query checking : enabled
[13-01-17 13:26:12,067] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  95) -> Second-level cache: enabled
[13-01-17 13:26:12,067] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  96) -> Second-level query cache: disabled
[13-01-17 13:26:12,067] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  97) -> Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@fbe70d8
[13-01-17 13:26:12,068] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  98) -> Second-level cache region prefix: null
[13-01-17 13:26:12,068] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  99) -> Optimize second-level cache for minimal puts: disabled
[13-01-17 13:26:12,068] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 100) -> Structured second-level cache entries: disabled
[13-01-17 13:26:12,068] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 101) -> Second-level cache direct-reference entries: disabled
[13-01-17 13:26:12,068] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 102) -> Automatic eviction of collection cache: disabled
[13-01-17 13:26:12,068] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 104) -> JDBC batch size: 15
[13-01-17 13:26:12,069] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 105) -> JDBC batch updates for versioned data: enabled
[13-01-17 13:26:12,069] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 106) -> Scrollable result sets: enabled
[13-01-17 13:26:12,069] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 107) -> Wrap result sets: disabled
[13-01-17 13:26:12,069] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 108) -> JDBC3 getGeneratedKeys(): disabled
[13-01-17 13:26:12,069] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 109) -> JDBC result set fetch size: null
[13-01-17 13:26:12,069] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 110) -> Connection release mode: AFTER_TRANSACTION
[13-01-17 13:26:12,069] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 111) -> Generate SQL with comments: disabled
[13-01-17 13:26:12,105] DEBUG (    org.hibernate.internal.SessionFactoryImpl-                        <init>: 254) -> Session factory constructed with filter configurations : {}
[13-01-17 13:26:12,106] DEBUG (    org.hibernate.internal.SessionFactoryImpl-                        <init>: 255) -> Instantiating session factory with properties: {gopherProxySet=false, hibernate.format_sql=true, awt.toolkit=sun.lwawt.macosx.LWCToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=, my-store=/Users/jcruz 1/MyCodeProjects/SFI.my-store/my-store/src/main/webapp/, sun.jnu.encoding=UTF-8, hibernate.dialect=org.hibernate.dialect.OracleDialect, java.class.path=/usr/local/Cellar/maven/3.3.9/libexec/boot/plexus-classworlds-2.5.2.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, java.vendor.url=http://java.oracle.com/, user.timezone=America/New_York, os.name=Mac OS X, java.vm.specification.version=1.8, hibernate.generate_statistics=true, hibernate.jdbc.batch_versioned_data=true, hibernate.order_updates=true, sun.java.launcher=SUN_STANDARD, user.country=US, hibernate.jdbc.batch_size=15, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib, sun.java.command=org.codehaus.plexus.classworlds.launcher.Launcher -Djetty.port=8888 jetty:run, hibernate.use_sql_comments=false, maven.home=/usr/local/Cellar/maven/3.3.9/libexec, sun.cpu.endian=little, user.home=/Users/jcruz 1, user.language=en, java.specification.vendor=Oracle Corporation, java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre, file.separator=/, hibernate.connection.isolation=4, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, java.awt.graphicsenv=sun.awt.CGraphicsEnvironment, sun.boot.class.path=/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/classes, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_71-b15, user.name=jcruz, path.separator=:, os.version=10.10.5, java.endorsed.dirs=/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/endorsed, java.runtime.name=Java(TM) SE Runtime Environment, file.encoding=UTF-8, guice.disable.misplaced.annotation.check=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.show_sql=true, hibernate.classLoaders=[ContextLoader@Archetype Created Web Application], hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=/var/folders/f6/sp1t6czs231b9grwtw6hl7w80000gs/T/, hibernate.query.factory_class=org.hibernate.hql.ast.ASTQueryTranslatorFactory, java.version=1.8.0_71, user.dir=/Users/jcruz 1/MyCodeProjects/SFI.my-store/my-store, os.arch=x86_64, maven.multiModuleProjectDirectory=/Users/jcruz 1/MyCodeProjects/SFI.my-store/my-store, jetty.port=8888, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.lwawt.macosx.CPrinterJob, sun.os.patch.level=unknown, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@570a62a5, java.library.path=/Users/jcruz 1/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor=Oracle Corporation, java.vm.info=mixed mode, java.vm.version=25.71-b15, classworlds.conf=/usr/local/Cellar/maven/3.3.9/libexec/bin/m2.conf, hibernate.bytecode.use_reflection_optimizer=false, hibernate.connection.datasource=org.apache.commons.dbcp.BasicDataSource@71a06021, sun.io.unicode.encoding=UnicodeBig, java.ext.dirs=/Users/jcruz 1/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java, java.class.version=52.0}
[13-01-17 13:26:12,113] DEBUG (          hibernate.secure.spi.JaccIntegrator-                 doIntegration:  80) -> Skipping JACC integration as it was not enabled
[13-01-17 13:26:12,117] DEBUG (    org.hibernate.internal.SessionFactoryImpl-                        <init>: 294) -> Instantiated session factory
[13-01-17 13:26:12,147] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.OrderItem] is safe
[13-01-17 13:26:12,147] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.OrderItem
[13-01-17 13:26:12,156] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.OrderItem] is safe
[13-01-17 13:26:12,156] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.OrderItem
[13-01-17 13:26:12,160]  INFO (         org.hibernate.tuple.PojoInstantiator-                        <init>:  47) -> HHH000182: No default (no-argument) constructor for class: com.kaplan.coding.mystore.persistence.domain.OrderItem (class must be instantiated by Interceptor)
[13-01-17 13:26:12,192] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.Product] is safe
[13-01-17 13:26:12,192] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.Product
[13-01-17 13:26:12,193] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.Product] is safe
[13-01-17 13:26:12,193] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.Product
[13-01-17 13:26:12,195] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.Orders] is safe
[13-01-17 13:26:12,196] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.Orders
[13-01-17 13:26:12,196] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.Orders] is safe
[13-01-17 13:26:12,196] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.Orders
[13-01-17 13:26:12,201] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3544) -> Static SQL for entity: com.kaplan.coding.mystore.persistence.domain.OrderItem
[13-01-17 13:26:12,202] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3549) ->  Version select: select ORDER_ITEM_ID from ORDER_ITEM where ORDER_ITEM_ID =?
[13-01-17 13:26:12,202] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3552) ->  Snapshot select: select orderitem_.ORDER_ITEM_ID, orderitem_.orders as orders2_0_, orderitem_.product as product3_0_, orderitem_.SOLD_QUANTITY as SOLD_QUA4_0_, orderitem_.UNIT_PRICE as UNIT_PRI5_0_ from ORDER_ITEM orderitem_ where orderitem_.ORDER_ITEM_ID=?
[13-01-17 13:26:12,202] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Insert 0: insert into ORDER_ITEM (orders, product, SOLD_QUANTITY, UNIT_PRICE, ORDER_ITEM_ID) values (?, ?, ?, ?, ?)
[13-01-17 13:26:12,202] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Update 0: update ORDER_ITEM set orders=?, product=?, SOLD_QUANTITY=?, UNIT_PRICE=? where ORDER_ITEM_ID=?
[13-01-17 13:26:12,202] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Delete 0: delete from ORDER_ITEM where ORDER_ITEM_ID=?
[13-01-17 13:26:12,214] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4ee8051c]
[13-01-17 13:26:12,215] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,215] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,215] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,215] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,215] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,223] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,225] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,227] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [NONE]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:26:12,227] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@649b5891]
[13-01-17 13:26:12,228] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,228] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,228] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,228] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,228] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,229] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,229] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,229] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [READ]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
