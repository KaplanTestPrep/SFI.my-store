[13-01-17 13:26:12,230] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1be52861]
[13-01-17 13:26:12,231] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,231] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,231] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,231] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,232] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,232] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,232] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,232] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [UPGRADE]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=? for update
[13-01-17 13:26:12,233] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@615439f7]
[13-01-17 13:26:12,233] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,233] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,233] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,233] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,234] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,234] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,234] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,235] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [UPGRADE_NOWAIT]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=? for update nowait
[13-01-17 13:26:12,235] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@51b87df7]
[13-01-17 13:26:12,235] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,235] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,236] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,236] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,236] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,236] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,236] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,237] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [UPGRADE_SKIPLOCKED]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=? for update
[13-01-17 13:26:12,237] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@634e1b39]
[13-01-17 13:26:12,237] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,237] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,237] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,238] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,238] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,238] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,238] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,238] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [FORCE]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=? for update nowait
[13-01-17 13:26:12,239] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@751d7425]
[13-01-17 13:26:12,239] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,239] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,239] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,239] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,240] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,240] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,240] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,240] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [PESSIMISTIC_READ]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=? for update
[13-01-17 13:26:12,241] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6dae70f9]
[13-01-17 13:26:12,241] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,241] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,241] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,241] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,241] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,242] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,242] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,242] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [PESSIMISTIC_WRITE]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=? for update
[13-01-17 13:26:12,243] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@53a301f3]
[13-01-17 13:26:12,243] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,243] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,243] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,244] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,244] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,244] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,245] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,245] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [PESSIMISTIC_FORCE_INCREMENT]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=? for update nowait
[13-01-17 13:26:12,245] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@62cf6a84]
[13-01-17 13:26:12,245] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,246] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,246] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,246] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,246] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,247] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,247] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,247] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [OPTIMISTIC]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:26:12,247] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6b2aafbc]
[13-01-17 13:26:12,248] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : orders
[13-01-17 13:26:12,248] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : product
[13-01-17 13:26:12,248] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,248] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,249] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,249] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,249] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.OrderItem, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.OrderItem)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.OrderItem)
          - SQL table alias mapping - orderitem0_
          - alias suffix - 0_
          - suffixed key columns - {ORDER_IT1_0_0_}

[13-01-17 13:26:12,250] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.OrderItem [OPTIMISTIC_FORCE_INCREMENT]: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:26:12,261] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_MERGE on entity com.kaplan.coding.mystore.persistence.domain.OrderItem: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:26:12,262] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_REFRESH on entity com.kaplan.coding.mystore.persistence.domain.OrderItem: select orderitem0_.ORDER_ITEM_ID as ORDER_IT1_0_0_, orderitem0_.orders as orders2_0_0_, orderitem0_.product as product3_0_0_, orderitem0_.SOLD_QUANTITY as SOLD_QUA4_0_0_, orderitem0_.UNIT_PRICE as UNIT_PRI5_0_0_ from ORDER_ITEM orderitem0_ where orderitem0_.ORDER_ITEM_ID=?
[13-01-17 13:26:12,262] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3544) -> Static SQL for entity: com.kaplan.coding.mystore.persistence.domain.Product
[13-01-17 13:26:12,262] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3549) ->  Version select: select SKU from PRODUCT where SKU =?
[13-01-17 13:26:12,262] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3552) ->  Snapshot select: select product_.SKU, product_.NAME as NAME2_2_, product_.QUANTITY as QUANTITY3_2_, product_.UNIT_PRICE as UNIT_PRI4_2_ from PRODUCT product_ where product_.SKU=?
[13-01-17 13:26:12,263] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Insert 0: insert into PRODUCT (NAME, QUANTITY, UNIT_PRICE, SKU) values (?, ?, ?, ?)
[13-01-17 13:26:12,263] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Update 0: update PRODUCT set NAME=?, QUANTITY=?, UNIT_PRICE=? where SKU=?
[13-01-17 13:26:12,263] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Delete 0: delete from PRODUCT where SKU=?
[13-01-17 13:26:12,263] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@787178b1]
[13-01-17 13:26:12,264] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,264] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,264] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,265] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,265] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,265] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,265] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [NONE]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:26:12,266] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@27da994b]
[13-01-17 13:26:12,266] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,266] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,266] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,267] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,267] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,267] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,268] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [READ]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:26:12,268] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3360283]
[13-01-17 13:26:12,268] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,268] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,269] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,269] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,269] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,270] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,270] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [UPGRADE]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update
[13-01-17 13:26:12,270] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@73e4bb60]
[13-01-17 13:26:12,270] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,271] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,271] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,271] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,271] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,272] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,272] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [UPGRADE_NOWAIT]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update nowait
[13-01-17 13:26:12,272] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a3883c4]
[13-01-17 13:26:12,273] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,273] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,273] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,273] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,274] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,274] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,274] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [UPGRADE_SKIPLOCKED]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update
[13-01-17 13:26:12,274] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1304e0d7]
[13-01-17 13:26:12,275] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,275] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,275] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,275] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,275] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,276] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,276] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [FORCE]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update nowait
[13-01-17 13:26:12,276] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7767bd4e]
[13-01-17 13:26:12,276] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,277] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,277] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,277] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,277] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,278] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,278] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [PESSIMISTIC_READ]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update
[13-01-17 13:26:12,278] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@433ef204]
[13-01-17 13:26:12,279] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,279] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,279] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,279] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,280] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,280] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,280] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [PESSIMISTIC_WRITE]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update
[13-01-17 13:26:12,280] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@795b66d]
[13-01-17 13:26:12,281] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,281] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,281] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,281] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,282] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,282] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,282] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [PESSIMISTIC_FORCE_INCREMENT]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=? for update nowait
[13-01-17 13:26:12,282] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1068176]
[13-01-17 13:26:12,283] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,283] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,283] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,283] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,284] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,284] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,284] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [OPTIMISTIC]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:26:12,284] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@71789580]
[13-01-17 13:26:12,285] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : name
[13-01-17 13:26:12,285] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : quantity
[13-01-17 13:26:12,285] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : unitPrice
[13-01-17 13:26:12,285] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,285] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,285] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Product)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Product, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Product)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Product)
          - SQL table alias mapping - product0_
          - alias suffix - 0_
          - suffixed key columns - {SKU1_2_0_}

[13-01-17 13:26:12,286] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Product [OPTIMISTIC_FORCE_INCREMENT]: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:26:12,286] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_MERGE on entity com.kaplan.coding.mystore.persistence.domain.Product: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:26:12,286] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_REFRESH on entity com.kaplan.coding.mystore.persistence.domain.Product: select product0_.SKU as SKU1_2_0_, product0_.NAME as NAME2_2_0_, product0_.QUANTITY as QUANTITY3_2_0_, product0_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT product0_ where product0_.SKU=?
[13-01-17 13:26:12,287] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3544) -> Static SQL for entity: com.kaplan.coding.mystore.persistence.domain.Orders
[13-01-17 13:26:12,287] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3549) ->  Version select: select ID from ORDERS where ID =?
[13-01-17 13:26:12,287] DEBUG (hibernate.persister.entity.AbstractEntityPersister-                  logStaticSQL:3552) ->  Snapshot select: select orders_.ID, orders_.AMOUNT as AMOUNT2_1_, orders_.CREATED_DATE as CREATED_3_1_ from ORDERS orders_ where orders_.ID=?
[13-01-17 13:26:12,287] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Insert 0: insert into ORDERS (AMOUNT, CREATED_DATE, ID) values (?, ?, ?)
[13-01-17 13:26:12,287] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Update 0: update ORDERS set AMOUNT=?, CREATED_DATE=? where ID=?
[13-01-17 13:26:12,287] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 394) ->  Delete 0: delete from ORDERS where ID=?
[13-01-17 13:26:12,288] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@165614f5]
[13-01-17 13:26:12,288] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,288] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,288] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,289] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,289] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,289] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [NONE]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:26:12,290] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b0902b4]
[13-01-17 13:26:12,290] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,290] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,290] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,291] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,291] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,291] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [READ]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:26:12,291] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f04993d]
[13-01-17 13:26:12,292] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,292] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,292] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,292] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,293] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,293] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [UPGRADE]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update
[13-01-17 13:26:12,293] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@103c97ff]
[13-01-17 13:26:12,293] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,293] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,294] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,294] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,294] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,294] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [UPGRADE_NOWAIT]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update nowait
[13-01-17 13:26:12,295] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c14e5a5]
[13-01-17 13:26:12,295] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,295] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,295] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,296] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,296] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,296] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [UPGRADE_SKIPLOCKED]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update
[13-01-17 13:26:12,296] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6206b4a7]
[13-01-17 13:26:12,296] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,297] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,297] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,297] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,297] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,298] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [FORCE]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update nowait
[13-01-17 13:26:12,298] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5c1b89ac]
[13-01-17 13:26:12,298] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,298] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,298] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,299] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,299] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,299] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [PESSIMISTIC_READ]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update
[13-01-17 13:26:12,299] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@175581eb]
[13-01-17 13:26:12,299] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,300] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,300] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,300] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,300] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,301] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [PESSIMISTIC_WRITE]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update
[13-01-17 13:26:12,301] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2baf72d5]
[13-01-17 13:26:12,301] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,301] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,301] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,302] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,302] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,302] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [PESSIMISTIC_FORCE_INCREMENT]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=? for update nowait
[13-01-17 13:26:12,302] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5d14e99e]
[13-01-17 13:26:12,302] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,302] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,303] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,303] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,303] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,303] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [OPTIMISTIC]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:26:12,304] DEBUG (        build.internal.spaces.QuerySpacesImpl-            registerQuerySpace: 174) -> Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@682618e5]
[13-01-17 13:26:12,304] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : amount
[13-01-17 13:26:12,304] DEBUG (   persister.walking.spi.MetamodelGraphWalker-      visitAttributeDefinition: 137) -> Visiting attribute path : createdDate
[13-01-17 13:26:12,304] DEBUG (plan.build.internal.FetchStyleLoadPlanBuildingAssociationVisitationStrategy-                 buildLoadPlan: 150) -> Building LoadPlan...
[13-01-17 13:26:12,304] DEBUG (plan.exec.internal.LoadQueryJoinAndFetchProcessor-        processQuerySpaceJoins: 100) -> processing queryspace <gen:0>
[13-01-17 13:26:12,305] DEBUG (           plan.build.spi.LoadPlanTreePrinter-                       logTree:  55) -> LoadPlan(entity=com.kaplan.coding.mystore.persistence.domain.Orders)
    - Returns
       - EntityReturnImpl(entity=com.kaplan.coding.mystore.persistence.domain.Orders, querySpaceUid=<gen:0>, path=com.kaplan.coding.mystore.persistence.domain.Orders)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.kaplan.coding.mystore.persistence.domain.Orders)
          - SQL table alias mapping - orders0_
          - alias suffix - 0_
          - suffixed key columns - {ID1_1_0_}

[13-01-17 13:26:12,305] DEBUG (              loader.entity.plan.EntityLoader-                        <init>: 115) -> Static select for entity com.kaplan.coding.mystore.persistence.domain.Orders [OPTIMISTIC_FORCE_INCREMENT]: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:26:12,305] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_MERGE on entity com.kaplan.coding.mystore.persistence.domain.Orders: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:26:12,305] DEBUG (  hibernate.loader.entity.CascadeEntityLoader-                        <init>:  38) -> Static select for action ACTION_REFRESH on entity com.kaplan.coding.mystore.persistence.domain.Orders: select orders0_.ID as ID1_1_0_, orders0_.AMOUNT as AMOUNT2_1_0_, orders0_.CREATED_DATE as CREATED_3_1_0_ from ORDERS orders0_ where orders0_.ID=?
[13-01-17 13:26:12,437] DEBUG (tool.schema.spi.SchemaManagementToolCoordinator-                       process:  56) -> No actions specified; doing nothing
[13-01-17 13:26:12,438] DEBUG (   jta.platform.internal.JtaPlatformInitiator-               initiateService:  42) -> No JtaPlatform was specified, checking resolver
[13-01-17 13:26:12,439] DEBUG (jta.platform.internal.JtaPlatformResolverInitiator-               initiateService:  33) -> No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
[13-01-17 13:26:12,443] DEBUG (jta.platform.internal.StandardJtaPlatformResolver-            resolveJtaPlatform: 102) -> Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
[13-01-17 13:26:12,444] DEBUG (     hibernate.query.spi.NamedQueryRepository-             checkNamedQueries: 151) -> Checking 0 named HQL queries
[13-01-17 13:26:12,444] DEBUG (     hibernate.query.spi.NamedQueryRepository-             checkNamedQueries: 167) -> Checking 0 named SQL queries
[13-01-17 13:26:12,445] DEBUG (org.hibernate.internal.SessionFactoryRegistry-                        <init>:  52) -> Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@716f94c1
[13-01-17 13:26:12,445] DEBUG (org.hibernate.internal.SessionFactoryRegistry-             addSessionFactory:  74) -> Registering SessionFactory: 88d3f7a7-63ad-46fa-9e09-54e7b55b1edd (<unnamed>)
[13-01-17 13:26:12,446] DEBUG (org.hibernate.internal.SessionFactoryRegistry-             addSessionFactory:  81) -> Not binding SessionFactory to JNDI, no JNDI name configured
[13-01-17 13:26:13,508] DEBUG (  hibernate.stat.internal.StatisticsInitiator-       initiateServiceInternal:  82) -> Statistics initialized [enabled=true]
[13-01-17 13:26:13,513] DEBUG (  engine.transaction.internal.TransactionImpl-                         begin:  55) -> begin
[13-01-17 13:26:13,515]  WARN (           org.hibernate.internal.SessionImpl-                createCriteria:1796) -> HHH90000022: Hibernate's legacy org.hibernate.Criteria API is deprecated; use the JPA javax.persistence.criteria.CriteriaQuery instead
[13-01-17 13:26:13,657] DEBUG (hibernate.stat.internal.ConcurrentStatisticsImpl-                 queryExecuted: 387) -> HHH000117: HQL: [CRITERIA] select this_.SKU as SKU1_2_0_, this_.NAME as NAME2_2_0_, this_.QUANTITY as QUANTITY3_2_0_, this_.UNIT_PRICE as UNIT_PRI4_2_0_ from PRODUCT this_, time: 134ms, rows: 0
[13-01-17 13:26:13,658] DEBUG (  engine.transaction.internal.TransactionImpl-                        commit:  66) -> committing
[13-01-17 13:26:13,758] DEBUG (resource.jdbc.internal.LogicalConnectionManagedImpl-              afterTransaction: 154) -> Initiating JDBC connection release from afterTransaction
[13-01-17 13:26:13,855] DEBUG (resource.jdbc.internal.LogicalConnectionManagedImpl-              afterTransaction: 154) -> Initiating JDBC connection release from afterTransaction
[13-01-17 13:26:13,855]  INFO (hibernate.engine.internal.StatisticalLoggingSessionEventListener-                           end: 258) -> Session Metrics {
    55618 nanoseconds spent acquiring 1 JDBC connections;
    95892069 nanoseconds spent releasing 1 JDBC connections;
    29870773 nanoseconds spent preparing 1 JDBC statements;
    97799898 nanoseconds spent executing 1 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    24142 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)
}
[13-01-17 13:27:05,769] DEBUG (    org.hibernate.internal.SessionFactoryImpl-                         close: 733) -> HHH000031: Closing
[13-01-17 13:27:05,769] DEBUG (hibernate.service.internal.AbstractServiceRegistryImpl-               deRegisterChild: 410) -> Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
[13-01-17 13:27:05,770] DEBUG (boot.registry.internal.BootstrapServiceRegistryImpl-               deRegisterChild: 295) -> Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
[13-01-17 13:27:10,583] DEBUG (hibernate.integrator.internal.IntegratorServiceImpl-                 addIntegrator:  46) -> Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[13-01-17 13:27:10,586] DEBUG (hibernate.integrator.internal.IntegratorServiceImpl-                 addIntegrator:  46) -> Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[13-01-17 13:27:10,589] DEBUG (hibernate.integrator.internal.IntegratorServiceImpl-                 addIntegrator:  46) -> Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[13-01-17 13:27:10,666]  INFO (                        org.hibernate.Version-                    logVersion:  45) -> HHH000412: Hibernate Core {5.2.5.Final}
[13-01-17 13:27:10,668]  INFO (                org.hibernate.cfg.Environment-                      <clinit>: 213) -> HHH000206: hibernate.properties not found
[13-01-17 13:27:10,681] DEBUG (  jaxb.internal.stax.LocalXmlResourceResolver-                 resolveEntity:  57) -> Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD 3.0//EN] - [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]
[13-01-17 13:27:10,683]  WARN (  jaxb.internal.stax.LocalXmlResourceResolver-                 resolveEntity:  91) -> HHH90000012: Recognized obsolete hibernate namespace http://hibernate.sourceforge.net/hibernate-configuration. Use namespace http://www.hibernate.org/dtd/hibernate-configuration instead.  Support for obsolete DTD/XSD namespaces may be removed at any time.
[13-01-17 13:27:10,684] DEBUG (  jaxb.internal.stax.LocalXmlResourceResolver-                 resolveEntity:  95) -> Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
[13-01-17 13:27:10,686] DEBUG (        boot.cfgxml.internal.JaxbCfgProcessor-                     unmarshal: 116) -> cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
[13-01-17 13:27:10,767] DEBUG (              org.hibernate.cfg.Configuration-           buildSessionFactory: 724) -> Building session factory using internal StandardServiceRegistryBuilder
[13-01-17 13:27:10,771] DEBUG (         hibernate.service.spi.ServiceBinding-                    setService:  68) -> Overriding existing service binding [org.hibernate.secure.spi.JaccService]
[13-01-17 13:27:10,771] DEBUG (              org.hibernate.cfg.Configuration-           buildSessionFactory: 652) -> Building session factory using provided StandardServiceRegistry
[13-01-17 13:27:10,782] DEBUG (hibernate.cache.internal.RegionFactoryInitiator-               initiateService:  75) -> Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
[13-01-17 13:27:10,786]  INFO ( common.reflection.java.JavaReflectionManager-                      <clinit>:  66) -> HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
[13-01-17 13:27:13,677] DEBUG (   jdbc.env.internal.JdbcEnvironmentInitiator-               initiateService:  72) -> Database ->
       name : Oracle
    version : Oracle Database 11g Release 11.2.0.4.0 - 64bit Production
      major : 11
      minor : 2
[13-01-17 13:27:13,678] DEBUG (   jdbc.env.internal.JdbcEnvironmentInitiator-               initiateService:  83) -> Driver ->
       name : Oracle JDBC driver
    version : 12.1.0.2.0
      major : 12
      minor : 1
[13-01-17 13:27:13,679] DEBUG (      org.jboss.logging.DelegatingBasicLogger-                        debugf: 389) -> JDBC version : 4.1
[13-01-17 13:27:13,689]  INFO (                org.hibernate.dialect.Dialect-                        <init>: 157) -> HHH000400: Using dialect: org.hibernate.dialect.OracleDialect
[13-01-17 13:27:13,694]  WARN (         org.hibernate.dialect.Oracle9Dialect-                        <init>:  56) -> HHH000063: The Oracle9Dialect dialect has been deprecated; use either Oracle9iDialect or Oracle10gDialect instead
[13-01-17 13:27:13,695]  WARN (          org.hibernate.dialect.OracleDialect-                        <init>:  39) -> HHH000064: The OracleDialect dialect has been deprecated; use Oracle8iDialect instead
[13-01-17 13:27:14,852] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
[13-01-17 13:27:14,853] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
[13-01-17 13:27:14,854] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
[13-01-17 13:27:14,854] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
[13-01-17 13:27:14,854] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
[13-01-17 13:27:14,855] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
[13-01-17 13:27:14,856] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
[13-01-17 13:27:14,857] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[13-01-17 13:27:14,857] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
[13-01-17 13:27:14,858] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
[13-01-17 13:27:14,858] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
[13-01-17 13:27:14,859] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
[13-01-17 13:27:14,859] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[13-01-17 13:27:14,860] DEBUG (id.factory.internal.DefaultIdentifierGeneratorFactory-                      register:  81) -> Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
[13-01-17 13:27:14,876] DEBUG (              boot.model.relational.Namespace-                        <init>:  47) -> Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
[13-01-17 13:27:14,893] DEBUG (           org.hibernate.cfg.AnnotationBinder-                     bindClass: 511) -> Binding entity from annotated class: com.kaplan.coding.mystore.persistence.domain.Product
[13-01-17 13:27:14,908] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[13-01-17 13:27:14,911] DEBUG (       hibernate.cfg.annotations.EntityBinder-                    bindEntity: 414) -> Import with entity name Product
[13-01-17 13:27:14,913] DEBUG (       hibernate.cfg.annotations.EntityBinder-                     bindTable: 690) -> Bind entity com.kaplan.coding.mystore.persistence.domain.Product on table PRODUCT
[13-01-17 13:27:14,926] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PRODUCT), mappingColumn=SKU, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,929] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property sku with lazy=false
[13-01-17 13:27:14,931] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Product:sku]
[13-01-17 13:27:14,932] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for sku
[13-01-17 13:27:14,934] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property sku
[13-01-17 13:27:14,936] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PRODUCT), mappingColumn=NAME, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,936] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property name with lazy=false
[13-01-17 13:27:14,936] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Product:name]
[13-01-17 13:27:14,936] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for name
[13-01-17 13:27:14,936] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property name
[13-01-17 13:27:14,937] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PRODUCT), mappingColumn=QUANTITY, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,937] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property quantity with lazy=false
[13-01-17 13:27:14,937] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Product:quantity]
[13-01-17 13:27:14,938] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for quantity
[13-01-17 13:27:14,938] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property quantity
[13-01-17 13:27:14,938] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(PRODUCT), mappingColumn=UNIT_PRICE, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,938] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property unitPrice with lazy=false
[13-01-17 13:27:14,939] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Product:unitPrice]
[13-01-17 13:27:14,939] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for unitPrice
[13-01-17 13:27:14,939] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property unitPrice
[13-01-17 13:27:14,940] DEBUG (           org.hibernate.cfg.AnnotationBinder-                     bindClass: 511) -> Binding entity from annotated class: com.kaplan.coding.mystore.persistence.domain.Orders
[13-01-17 13:27:14,940] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[13-01-17 13:27:14,942] DEBUG (       hibernate.cfg.annotations.EntityBinder-                    bindEntity: 414) -> Import with entity name Orders
[13-01-17 13:27:14,944] DEBUG (       hibernate.cfg.annotations.EntityBinder-                     bindTable: 690) -> Bind entity com.kaplan.coding.mystore.persistence.domain.Orders on table ORDERS
[13-01-17 13:27:14,945] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDERS), mappingColumn=ID, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,946] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property orderId with lazy=false
[13-01-17 13:27:14,946] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Orders:orderId]
[13-01-17 13:27:14,946] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for orderId
[13-01-17 13:27:14,947] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property orderId
[13-01-17 13:27:14,947] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDERS), mappingColumn=AMOUNT, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,948] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property amount with lazy=false
[13-01-17 13:27:14,948] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Orders:amount]
[13-01-17 13:27:14,948] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for amount
[13-01-17 13:27:14,949] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property amount
[13-01-17 13:27:14,949] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDERS), mappingColumn=CREATED_DATE, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,950] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property createdDate with lazy=false
[13-01-17 13:27:14,950] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.Orders:createdDate]
[13-01-17 13:27:14,951] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for createdDate
[13-01-17 13:27:14,951] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property createdDate
[13-01-17 13:27:14,952] DEBUG (           org.hibernate.cfg.AnnotationBinder-                     bindClass: 511) -> Binding entity from annotated class: com.kaplan.coding.mystore.persistence.domain.OrderItem
[13-01-17 13:27:14,952] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[13-01-17 13:27:14,953] DEBUG (       hibernate.cfg.annotations.EntityBinder-                    bindEntity: 414) -> Import with entity name OrderItem
[13-01-17 13:27:14,953] DEBUG (       hibernate.cfg.annotations.EntityBinder-                     bindTable: 690) -> Bind entity com.kaplan.coding.mystore.persistence.domain.OrderItem on table ORDER_ITEM
[13-01-17 13:27:14,957] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=ORDER_ITEM_ID, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,958] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property orderItemId with lazy=false
[13-01-17 13:27:14,958] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:orderItemId]
[13-01-17 13:27:14,959] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for orderItemId
[13-01-17 13:27:14,959] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property orderItemId
[13-01-17 13:27:14,961] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=orders, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,961] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property orders with lazy=false
[13-01-17 13:27:14,962] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:orders]
[13-01-17 13:27:14,962] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for orders
[13-01-17 13:27:14,963] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property orders
[13-01-17 13:27:14,963] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=product, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,963] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property product with lazy=false
[13-01-17 13:27:14,964] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:product]
[13-01-17 13:27:14,964] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for product
[13-01-17 13:27:14,964] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property product
[13-01-17 13:27:14,965] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=SOLD_QUANTITY, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,965] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property quantity with lazy=false
[13-01-17 13:27:14,965] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:quantity]
[13-01-17 13:27:14,966] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for quantity
[13-01-17 13:27:14,966] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property quantity
[13-01-17 13:27:14,966] DEBUG (                 org.hibernate.cfg.Ejb3Column-                          bind: 213) -> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ORDER_ITEM), mappingColumn=UNIT_PRICE, insertable=true, updatable=true, unique=false}
[13-01-17 13:27:14,967] DEBUG (     hibernate.cfg.annotations.PropertyBinder-          makePropertyAndValue: 174) -> MetadataSourceProcessor property unitPrice with lazy=false
[13-01-17 13:27:14,967] DEBUG (     org.hibernate.cfg.AbstractPropertyHolder-resolveAttributeConverterDescriptor:  89) -> Attempting to locate auto-apply AttributeConverter for property [com.kaplan.coding.mystore.persistence.domain.OrderItem:unitPrice]
[13-01-17 13:27:14,967] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-                          make: 411) -> building SimpleValue for unitPrice
[13-01-17 13:27:14,967] DEBUG (     hibernate.cfg.annotations.PropertyBinder-                  makeProperty: 265) -> Building property unitPrice
[13-01-17 13:27:14,968] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for sku
[13-01-17 13:27:14,968] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for name
[13-01-17 13:27:14,969] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for quantity
[13-01-17 13:27:14,970] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for unitPrice
[13-01-17 13:27:14,970] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for orderId
[13-01-17 13:27:14,970] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for amount
[13-01-17 13:27:14,971] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for createdDate
[13-01-17 13:27:14,971] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for orderItemId
[13-01-17 13:27:14,971] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for orders
[13-01-17 13:27:14,972] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.Orders] is safe
[13-01-17 13:27:14,972] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.Orders
[13-01-17 13:27:14,972] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for product
[13-01-17 13:27:14,973] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  55) -> Not known whether passed class name [com.kaplan.coding.mystore.persistence.domain.Product] is safe
[13-01-17 13:27:14,973] DEBUG (hibernate.boot.internal.ClassLoaderAccessImpl-                  classForName:  57) -> No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.kaplan.coding.mystore.persistence.domain.Product
[13-01-17 13:27:14,973] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for quantity
[13-01-17 13:27:14,973] DEBUG (  hibernate.cfg.annotations.SimpleValueBinder-               fillSimpleValue: 456) -> Starting fillSimpleValue for unitPrice
[13-01-17 13:27:14,974] DEBUG (             org.hibernate.mapping.PrimaryKey-                     addColumn:  35) -> Forcing column [sku] to be non-null as it is part of the primary key for table [product]
[13-01-17 13:27:14,975] DEBUG (             org.hibernate.mapping.PrimaryKey-                     addColumn:  35) -> Forcing column [id] to be non-null as it is part of the primary key for table [orders]
[13-01-17 13:27:14,975] DEBUG (             org.hibernate.mapping.PrimaryKey-                     addColumn:  35) -> Forcing column [order_item_id] to be non-null as it is part of the primary key for table [order_item]
[13-01-17 13:27:14,999] DEBUG (    org.hibernate.internal.SessionFactoryImpl-                        <init>: 199) -> Building session factory
[13-01-17 13:27:15,001] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  69) -> SessionFactory name : null
[13-01-17 13:27:15,001] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  70) -> Automatic flush during beforeCompletion(): enabled
[13-01-17 13:27:15,001] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  71) -> Automatic session close at end of transaction: disabled
[13-01-17 13:27:15,002] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  73) -> Statistics: enabled
[13-01-17 13:27:15,002] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  75) -> Deleted entity synthetic identifier rollback: disabled
[13-01-17 13:27:15,002] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  76) -> Default entity-mode: pojo
[13-01-17 13:27:15,002] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  77) -> Check Nullability in Core (should be disabled when Bean Validation is on): enabled
[13-01-17 13:27:15,003] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  78) -> Allow initialization of lazy state outside session : disabled
[13-01-17 13:27:15,003] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  80) -> Using BatchFetchStyle : LEGACY
[13-01-17 13:27:15,003] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  81) -> Default batch fetch size: -1
[13-01-17 13:27:15,003] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  82) -> Maximum outer join fetch depth: null
[13-01-17 13:27:15,003] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  83) -> Default null ordering: NONE
[13-01-17 13:27:15,004] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  84) -> Order SQL updates by primary key: enabled
[13-01-17 13:27:15,004] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  85) -> Order SQL inserts for batching: disabled
[13-01-17 13:27:15,004] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  87) -> multi-tenancy strategy : NONE
[13-01-17 13:27:15,004] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  89) -> JTA Track by Thread: enabled
[13-01-17 13:27:15,005] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  91) -> Query language substitutions: {}
[13-01-17 13:27:15,005] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  92) -> JPA query language strict compliance: disabled
[13-01-17 13:27:15,005] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  93) -> Named query checking : enabled
[13-01-17 13:27:15,005] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  95) -> Second-level cache: enabled
[13-01-17 13:27:15,006] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  96) -> Second-level query cache: disabled
[13-01-17 13:27:15,006] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  97) -> Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@fbe70d8
[13-01-17 13:27:15,006] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  98) -> Second-level cache region prefix: null
[13-01-17 13:27:15,006] DEBUG (                   org.hibernate.cfg.Settings-                        <init>:  99) -> Optimize second-level cache for minimal puts: disabled
[13-01-17 13:27:15,007] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 100) -> Structured second-level cache entries: disabled
[13-01-17 13:27:15,007] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 101) -> Second-level cache direct-reference entries: disabled
[13-01-17 13:27:15,007] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 102) -> Automatic eviction of collection cache: disabled
[13-01-17 13:27:15,007] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 104) -> JDBC batch size: 15
[13-01-17 13:27:15,008] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 105) -> JDBC batch updates for versioned data: enabled
[13-01-17 13:27:15,008] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 106) -> Scrollable result sets: enabled
[13-01-17 13:27:15,008] DEBUG (                   org.hibernate.cfg.Settings-                        <init>: 107) -> Wrap result sets: disabled
